/*
 * ProCAKE Rest API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.4
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DataClassModel', 'model/SMStringEqualModel', 'model/SMStringLevenshteinModel', 'model/SMStringNGramModel', 'api/CaseBaseControllerApi', 'api/ConfigurationControllerApi', 'api/ConversionControllerApi', 'api/InfoControllerApi', 'api/RetrievalControllerApi', 'api/SchemaControllerApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/DataClassModel'), require('./model/SMStringEqualModel'), require('./model/SMStringLevenshteinModel'), require('./model/SMStringNGramModel'), require('./api/CaseBaseControllerApi'), require('./api/ConfigurationControllerApi'), require('./api/ConversionControllerApi'), require('./api/InfoControllerApi'), require('./api/RetrievalControllerApi'), require('./api/SchemaControllerApi'));
  }
}(function(ApiClient, DataClassModel, SMStringEqualModel, SMStringLevenshteinModel, SMStringNGramModel, CaseBaseControllerApi, ConfigurationControllerApi, ConversionControllerApi, InfoControllerApi, RetrievalControllerApi, SchemaControllerApi) {
  'use strict';

  /**
   * ERROR_UNKNOWN.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var ProCakeRestApi = require('index'); // See note below*.
   * var xxxSvc = new ProCakeRestApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new ProCakeRestApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new ProCakeRestApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new ProCakeRestApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 1.0.4
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The DataClassModel model constructor.
     * @property {module:model/DataClassModel}
     */
    DataClassModel: DataClassModel,
    /**
     * The SMStringEqualModel model constructor.
     * @property {module:model/SMStringEqualModel}
     */
    SMStringEqualModel: SMStringEqualModel,
    /**
     * The SMStringLevenshteinModel model constructor.
     * @property {module:model/SMStringLevenshteinModel}
     */
    SMStringLevenshteinModel: SMStringLevenshteinModel,
    /**
     * The SMStringNGramModel model constructor.
     * @property {module:model/SMStringNGramModel}
     */
    SMStringNGramModel: SMStringNGramModel,
    /**
     * The CaseBaseControllerApi service constructor.
     * @property {module:api/CaseBaseControllerApi}
     */
    CaseBaseControllerApi: CaseBaseControllerApi,
    /**
     * The ConfigurationControllerApi service constructor.
     * @property {module:api/ConfigurationControllerApi}
     */
    ConfigurationControllerApi: ConfigurationControllerApi,
    /**
     * The ConversionControllerApi service constructor.
     * @property {module:api/ConversionControllerApi}
     */
    ConversionControllerApi: ConversionControllerApi,
    /**
     * The InfoControllerApi service constructor.
     * @property {module:api/InfoControllerApi}
     */
    InfoControllerApi: InfoControllerApi,
    /**
     * The RetrievalControllerApi service constructor.
     * @property {module:api/RetrievalControllerApi}
     */
    RetrievalControllerApi: RetrievalControllerApi,
    /**
     * The SchemaControllerApi service constructor.
     * @property {module:api/SchemaControllerApi}
     */
    SchemaControllerApi: SchemaControllerApi
  };

  return exports;
}));

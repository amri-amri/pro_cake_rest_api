/*
 * ProCAKE Rest API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.4
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.ProCakeRestApi) {
      root.ProCakeRestApi = {};
    }
    root.ProCakeRestApi.SchemaControllerApi = factory(root.ProCakeRestApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * SchemaController service.
   * @module api/SchemaControllerApi
   * @version 1.0.4
   */

  /**
   * Constructs a new SchemaControllerApi. 
   * @alias module:api/SchemaControllerApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getSchema operation.
     * @callback module:api/SchemaControllerApi~getSchemaCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch specific schema-file
     * One of the following roles is required to access thi resource: ADMIN, DEVELOPER
     * @param {String} schemaID 
     * @param {module:api/SchemaControllerApi~getSchemaCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getSchema = function(schemaID, callback) {
      var postBody = null;

      // verify the required parameter 'schemaID' is set
      if (schemaID === undefined || schemaID === null) {
        throw new Error("Missing the required parameter 'schemaID' when calling getSchema");
      }


      var pathParams = {
        'schemaID': schemaID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = [];
      var accepts = ['application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/schema/{schemaID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSchemata operation.
     * @callback module:api/SchemaControllerApi~getSchemataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch all schema-file names
     * One of the following roles is required to access thi resource: ADMIN, DEVELOPER
     * @param {module:api/SchemaControllerApi~getSchemataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getSchemata = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = [];
      var accepts = ['application/xml', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/schema/info', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));

/*
 * ProCAKE Rest API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.4
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.ProCakeRestApi) {
      root.ProCakeRestApi = {};
    }
    root.ProCakeRestApi.RetrievalControllerApi = factory(root.ProCakeRestApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * RetrievalController service.
   * @module api/RetrievalControllerApi
   * @version 1.0.4
   */

  /**
   * Constructs a new RetrievalControllerApi. 
   * @alias module:api/RetrievalControllerApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getRetrievers operation.
     * @callback module:api/RetrievalControllerApi~getRetrieversCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch all available retrievers
     * 
     * @param {module:api/RetrievalControllerApi~getRetrieversCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getRetrievers = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = [];
      var accepts = ['application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/retrieval/info', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieve operation.
     * @callback module:api/RetrievalControllerApi~retrieveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform retrieval with retriever retrieverID in CaseBase cbID
     * 
     * @param {String} retrieverID 
     * @param {String} cbid 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.addQueryToResults 
     * @param {Boolean} opts.setSorting 
     * @param {Number} opts.setTaskSize 
     * @param {String} opts.body 
     * @param {module:api/RetrievalControllerApi~retrieveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.retrieve = function(retrieverID, cbid, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'retrieverID' is set
      if (retrieverID === undefined || retrieverID === null) {
        throw new Error("Missing the required parameter 'retrieverID' when calling retrieve");
      }

      // verify the required parameter 'cbid' is set
      if (cbid === undefined || cbid === null) {
        throw new Error("Missing the required parameter 'cbid' when calling retrieve");
      }


      var pathParams = {
        'retrieverID': retrieverID,
        'cbid': cbid
      };
      var queryParams = {
        'addQueryToResults': opts['addQueryToResults'],
        'setSorting': opts['setSorting'],
        'setTaskSize': opts['setTaskSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/xml'];
      var accepts = ['application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/retrieval/{retrieverID}/{cbid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveTextual operation.
     * @callback module:api/RetrievalControllerApi~retrieveTextualCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform retrieval with retriever retrieverID in CaseBase cbID
     * 
     * @param {String} retrieverID 
     * @param {String} cbid 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.numberOfResults Number of results to be retrieved (every retriever)
     * @param {Boolean} opts.setSorting Sorts the elements based on their complexity before retrieval (ParallelLinearRetriever only)
     * @param {Number} opts.setTaskSize Amount of cases each worker extracts from the caseBase (ParallelLinearRetriever only)
     * @param {String} opts.body 
     * @param {module:api/RetrievalControllerApi~retrieveTextualCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.retrieveTextual = function(retrieverID, cbid, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'retrieverID' is set
      if (retrieverID === undefined || retrieverID === null) {
        throw new Error("Missing the required parameter 'retrieverID' when calling retrieveTextual");
      }

      // verify the required parameter 'cbid' is set
      if (cbid === undefined || cbid === null) {
        throw new Error("Missing the required parameter 'cbid' when calling retrieveTextual");
      }


      var pathParams = {
        'retrieverID': retrieverID,
        'cbid': cbid
      };
      var queryParams = {
        'numberOfResults': opts['numberOfResults'],
        'setSorting': opts['setSorting'],
        'setTaskSize': opts['setTaskSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = ['application/xml'];
      var accepts = ['application/xml'];
      var returnType = null;

      return this.apiClient.callApi(
        '/retrieval/textual/{retrieverID}/{cbid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));

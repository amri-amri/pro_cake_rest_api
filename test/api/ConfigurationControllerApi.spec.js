/*
 * ProCAKE Rest API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.4
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.29
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ProCakeRestApi);
  }
}(this, function(expect, ProCakeRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ProCakeRestApi.ConfigurationControllerApi();
  });

  describe('(package)', function() {
    describe('ConfigurationControllerApi', function() {
      describe('addDataClass', function() {
        it('should call addDataClass successfully', function(done) {
          // TODO: uncomment, update parameter values for addDataClass call
          /*
          var opts = {};
          opts.body = new ProCakeRestApi.DataClassModel();
          opts.body.name = "";
          opts.body.superClass = "";

          instance.addDataClass(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteDataClass', function() {
        it('should call deleteDataClass successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteDataClass call
          /*
          var className = "className_example";

          instance.deleteDataClass(className, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteMeasure', function() {
        it('should call deleteMeasure successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteMeasure call
          /*
          var measureName = "measureName_example";
          var dataClass = "dataClass_example";

          instance.deleteMeasure(measureName, dataClass, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('sMStringEqual', function() {
        it('should call sMStringEqual successfully', function(done) {
          // TODO: uncomment, update parameter values for sMStringEqual call
          /*
          var opts = {};
          opts.body = new ProCakeRestApi.SMStringEqualModel();
          opts.body.name = "";
          opts.body.dataClass = "";
          opts.body.caseSensitive = false;

          instance.sMStringEqual(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('sMStringLevenshtein', function() {
        it('should call sMStringLevenshtein successfully', function(done) {
          // TODO: uncomment, update parameter values for sMStringLevenshtein call
          /*
          var opts = {};
          opts.body = new ProCakeRestApi.SMStringLevenshteinModel();
          opts.body.name = "";
          opts.body.dataClass = "";
          opts.body.caseSensitive = false;
          opts.body.threshold = 0;

          instance.sMStringLevenshtein(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('sMStringNGram', function() {
        it('should call sMStringNGram successfully', function(done) {
          // TODO: uncomment, update parameter values for sMStringNGram call
          /*
          var opts = {};
          opts.body = new ProCakeRestApi.SMStringNGramModel();
          opts.body.name = "";
          opts.body.dataClass = "";
          opts.body.caseSensitive = false;
          opts.body.size = 0;

          instance.sMStringNGram(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
